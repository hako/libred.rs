/* automatically generated by rust-bindgen */

#[link(name = "Red")]

extern "C" {}

pub const RED_VERSION_MAJOR: ::std::os::raw::c_uint = 1;
pub const RED_VERSION_MINOR: ::std::os::raw::c_uint = 0;
pub const RED_VERSION_PATCH: ::std::os::raw::c_uint = 0;
pub const RED_VERSION_STRING: &'static [u8; 6usize] = b"1.0.0\0";
pub const RED_VERSION_NUMBER: ::std::os::raw::c_uint = 1000000;
pub type red_value = *mut ::std::os::raw::c_void;
pub type red_unset = red_value;
pub type red_datatype = red_value;
pub type red_none = red_value;
pub type red_logic = red_value;
pub type red_integer = red_value;
pub type red_float = red_value;
pub type red_pair = red_value;
pub type red_tuple = red_value;
pub type red_binary = red_value;
pub type red_image = red_value;
pub type red_string = red_value;
pub type red_word = red_value;
pub type red_block = red_value;
pub type red_path = red_value;
pub type red_series = red_value;
pub type red_error = red_value;
extern "C" {
 # [ link_name = "\u{1}_redOpen" ]
    pub fn redOpen();
}
extern "C" {
 # [ link_name = "\u{1}_redClose" ]
    pub fn redClose();
}
extern "C" {
 # [ link_name = "\u{1}_redDo" ]
    pub fn redDo(source: *const ::std::os::raw::c_char) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redDoFile" ]
    pub fn redDoFile(file: *const ::std::os::raw::c_char) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redDoBlock" ]
    pub fn redDoBlock(code: red_block) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redCall" ]
    pub fn redCall(name: red_word, ...) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redRoutine" ]
    pub fn redRoutine(name: red_word,
                      spec: *const ::std::os::raw::c_char,
                      func_ptr: *mut ::std::os::raw::c_void)
                      -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redSymbol" ]
    pub fn redSymbol(word: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
 # [ link_name = "\u{1}_redUnset" ]
    pub fn redUnset() -> red_unset;
}
extern "C" {
 # [ link_name = "\u{1}_redNone" ]
    pub fn redNone() -> red_none;
}
extern "C" {
 # [ link_name = "\u{1}_redLogic" ]
    pub fn redLogic(logic: ::std::os::raw::c_long) -> red_logic;
}
extern "C" {
 # [ link_name = "\u{1}_redDatatype" ]
    pub fn redDatatype(type_: ::std::os::raw::c_long) -> red_datatype;
}
extern "C" {
 # [ link_name = "\u{1}_redInteger" ]
    pub fn redInteger(number: ::std::os::raw::c_long) -> red_integer;
}
extern "C" {
 # [ link_name = "\u{1}_redFloat" ]
    pub fn redFloat(number: f64) -> red_float;
}
extern "C" {
 # [ link_name = "\u{1}_redPair" ]
    pub fn redPair(x: ::std::os::raw::c_long, y: ::std::os::raw::c_long) -> red_pair;
}
extern "C" {
 # [ link_name = "\u{1}_redTuple" ]
    pub fn redTuple(r: ::std::os::raw::c_long,
                    g: ::std::os::raw::c_long,
                    b: ::std::os::raw::c_long)
                    -> red_tuple;
}
extern "C" {
 # [ link_name = "\u{1}_redTuple4" ]
    pub fn redTuple4(r: ::std::os::raw::c_long,
                     g: ::std::os::raw::c_long,
                     b: ::std::os::raw::c_long,
                     a: ::std::os::raw::c_long)
                     -> red_tuple;
}
extern "C" {
 # [ link_name = "\u{1}_redBinary" ]
    pub fn redBinary(buffer: *const ::std::os::raw::c_char,
                     bytes: ::std::os::raw::c_long)
                     -> red_binary;
}
extern "C" {
 # [ link_name = "\u{1}_redImage" ]
    pub fn redImage(width: ::std::os::raw::c_long,
                    height: ::std::os::raw::c_long,
                    buffer: *const ::std::os::raw::c_void,
                    format: ::std::os::raw::c_long)
                    -> red_image;
}
extern "C" {
 # [ link_name = "\u{1}_redString" ]
    pub fn redString(string: *const ::std::os::raw::c_char) -> red_string;
}
extern "C" {
 # [ link_name = "\u{1}_redWord" ]
    pub fn redWord(word: *const ::std::os::raw::c_char) -> red_word;
}
extern "C" {
 # [ link_name = "\u{1}_redBlock" ]
    pub fn redBlock(v: red_value, ...) -> red_block;
}
extern "C" {
 # [ link_name = "\u{1}_redPath" ]
    pub fn redPath(v: red_value, ...) -> red_path;
}
extern "C" {
 # [ link_name = "\u{1}_redLoadPath" ]
    pub fn redLoadPath(path: *const ::std::os::raw::c_char) -> red_path;
}
extern "C" {
 # [ link_name = "\u{1}_redMakeSeries" ]
    pub fn redMakeSeries(type_: ::std::os::raw::c_ulong,
                         slots: ::std::os::raw::c_ulong)
                         -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redCInt32" ]
    pub fn redCInt32(number: red_integer) -> ::std::os::raw::c_long;
}
extern "C" {
 # [ link_name = "\u{1}_redCDouble" ]
    pub fn redCDouble(number: red_float) -> f64;
}
extern "C" {
 # [ link_name = "\u{1}_redCString" ]
    pub fn redCString(string: red_string) -> *const ::std::os::raw::c_char;
}
extern "C" {
 # [ link_name = "\u{1}_redTypeOf" ]
    pub fn redTypeOf(value: red_value) -> ::std::os::raw::c_long;
}
extern "C" {
 # [ link_name = "\u{1}_redAppend" ]
    pub fn redAppend(series: red_series, value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redChange" ]
    pub fn redChange(series: red_series, value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redClear" ]
    pub fn redClear(series: red_series) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redCopy" ]
    pub fn redCopy(value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redFind" ]
    pub fn redFind(series: red_series, value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redIndex" ]
    pub fn redIndex(series: red_series) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redLength" ]
    pub fn redLength(series: red_series) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redMake" ]
    pub fn redMake(proto: red_value, spec: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redMold" ]
    pub fn redMold(value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redPick" ]
    pub fn redPick(series: red_series, value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redPoke" ]
    pub fn redPoke(series: red_series, index: red_value, value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redPut" ]
    pub fn redPut(series: red_series, index: red_value, value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redRemove" ]
    pub fn redRemove(series: red_series) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redSelect" ]
    pub fn redSelect(series: red_series, value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redSkip" ]
    pub fn redSkip(series: red_series, offset: red_integer) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redTo" ]
    pub fn redTo(proto: red_value, spec: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redSet" ]
    pub fn redSet(id: ::std::os::raw::c_long, value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redGet" ]
    pub fn redGet(id: ::std::os::raw::c_long) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redSetPath" ]
    pub fn redSetPath(path: red_path, value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redGetPath" ]
    pub fn redGetPath(path: red_path) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redSetField" ]
    pub fn redSetField(obj: red_value,
                       field: ::std::os::raw::c_long,
                       value: red_value)
                       -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redGetField" ]
    pub fn redGetField(obj: red_value, field: ::std::os::raw::c_long) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redPrint" ]
    pub fn redPrint(value: red_value);
}
extern "C" {
 # [ link_name = "\u{1}_redProbe" ]
    pub fn redProbe(value: red_value) -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redHasError" ]
    pub fn redHasError() -> red_value;
}
extern "C" {
 # [ link_name = "\u{1}_redFormError" ]
    pub fn redFormError() -> *const ::std::os::raw::c_char;
}
extern "C" {
 # [ link_name = "\u{1}_redOpenLogWindow" ]
    pub fn redOpenLogWindow() -> ::std::os::raw::c_int;
}
extern "C" {
 # [ link_name = "\u{1}_redCloseLogWindow" ]
    pub fn redCloseLogWindow() -> ::std::os::raw::c_int;
}
extern "C" {
 # [ link_name = "\u{1}_redOpenLogFile" ]
    pub fn redOpenLogFile(name: *const ::std::os::raw::c_char);
}
extern "C" {
 # [ link_name = "\u{1}_redCloseLogFile" ]
    pub fn redCloseLogFile();
}
pub const RedImageFormat_RED_IMAGE_FORMAT_RGB: RedImageFormat = 0;
pub const RedImageFormat_RED_IMAGE_FORMAT_ARGB: RedImageFormat = 1;
pub type RedImageFormat = ::std::os::raw::c_uint;
pub const RedType_RED_TYPE_VALUE: RedType = 0;
pub const RedType_RED_TYPE_DATATYPE: RedType = 1;
pub const RedType_RED_TYPE_UNSET: RedType = 2;
pub const RedType_RED_TYPE_NONE: RedType = 3;
pub const RedType_RED_TYPE_LOGIC: RedType = 4;
pub const RedType_RED_TYPE_BLOCK: RedType = 5;
pub const RedType_RED_TYPE_PAREN: RedType = 6;
pub const RedType_RED_TYPE_STRING: RedType = 7;
pub const RedType_RED_TYPE_FILE: RedType = 8;
pub const RedType_RED_TYPE_URL: RedType = 9;
pub const RedType_RED_TYPE_CHAR: RedType = 10;
pub const RedType_RED_TYPE_INTEGER: RedType = 11;
pub const RedType_RED_TYPE_FLOAT: RedType = 12;
pub const RedType_RED_TYPE_SYMBOL: RedType = 13;
pub const RedType_RED_TYPE_CONTEXT: RedType = 14;
pub const RedType_RED_TYPE_WORD: RedType = 15;
pub const RedType_RED_TYPE_SET_WORD: RedType = 16;
pub const RedType_RED_TYPE_LIT_WORD: RedType = 17;
pub const RedType_RED_TYPE_GET_WORD: RedType = 18;
pub const RedType_RED_TYPE_REFINEMENT: RedType = 19;
pub const RedType_RED_TYPE_ISSUE: RedType = 20;
pub const RedType_RED_TYPE_NATIVE: RedType = 21;
pub const RedType_RED_TYPE_ACTION: RedType = 22;
pub const RedType_RED_TYPE_OP: RedType = 23;
pub const RedType_RED_TYPE_FUNCTION: RedType = 24;
pub const RedType_RED_TYPE_PATH: RedType = 25;
pub const RedType_RED_TYPE_LIT_PATH: RedType = 26;
pub const RedType_RED_TYPE_SET_PATH: RedType = 27;
pub const RedType_RED_TYPE_GET_PATH: RedType = 28;
pub const RedType_RED_TYPE_ROUTINE: RedType = 29;
pub const RedType_RED_TYPE_BITSET: RedType = 30;
pub const RedType_RED_TYPE_POINT: RedType = 31;
pub const RedType_RED_TYPE_OBJECT: RedType = 32;
pub const RedType_RED_TYPE_TYPESET: RedType = 33;
pub const RedType_RED_TYPE_ERROR: RedType = 34;
pub const RedType_RED_TYPE_VECTOR: RedType = 35;
pub const RedType_RED_TYPE_HASH: RedType = 36;
pub const RedType_RED_TYPE_PAIR: RedType = 37;
pub const RedType_RED_TYPE_PERCENT: RedType = 38;
pub const RedType_RED_TYPE_TUPLE: RedType = 39;
pub const RedType_RED_TYPE_MAP: RedType = 40;
pub const RedType_RED_TYPE_BINARY: RedType = 41;
pub const RedType_RED_TYPE_SERIES: RedType = 42;
pub const RedType_RED_TYPE_TIME: RedType = 43;
pub const RedType_RED_TYPE_TAG: RedType = 44;
pub const RedType_RED_TYPE_EMAIL: RedType = 45;
pub const RedType_RED_TYPE_IMAGE: RedType = 46;
pub const RedType_RED_TYPE_EVENT: RedType = 47;
pub const RedType_RED_TYPE_DATE: RedType = 48;
pub type RedType = ::std::os::raw::c_uint;
